{
  "version": 3,
  "file": "domdom.js",
  "sourceRoot": "",
  "sources": [
    "domdom.litcoffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Domdom: a simple, dynamic HTML presentation system that supports local or client/server usage\n\nCopyright (C) 2019, by Bill Burdick, ZLIB licensed, https://github.com/zot/domdom\n\nDomdom uses a JSON object to implement its own Document Object Model that you can share with your local JavaScipt code or with a server. Domdom renders the JSON object in the browser using definitions you provide and it re-renders parts of the GUI when you change values in the JSON object. You can manage the model either in local JavaScript or on a server. Domdom also binds parts of the JSON object and changes it when users interact with the GUI, transmitting those changes to the local JavaScript code or to the server.\n\nDomdom is engineered to be simple and lightweight, defined in roughly 600 lines of CoffeeScript.\n\n# Overview\n\nDomdom chooses a \"view\" for each nested object in the JSON object you provide by using the object's \"type\" property. Views are defined using Handlebars, displaying with the JSON object as their context. Domdom also supports namespaces for views, i.e. you can define different views on the same type for different contexts (an object could render as a form in one namespace and a list item in another namespace).\n\nWhen the Javascript model (or server, if connected) changes some of Domdom's JSON objects, it automatically rerenders the views for those objects.\n\nDomdom can bind values in its HTML views to paths in its JSON objects so that the HTML can display and/or change the values at thoses paths. When the user changes one of those values, Domdom changes the JSON object at that path and sends an event to the Javascript model (or the server, if connected).\n\n# Views\n\nViews are Handlebars templates that can also contain other views via the `view` Handlebar plugin and `data-path` attributes in divs and spans which each specify a *path* to property in a JSON object.\n\nInput elements in views can also contain `data-path` attributes that specifying a\n*path* to a property in the JSON object, example:\n\n`<input type=text data-path=\"a.b.c\">`\n\nIf an element has a non-null data-bind-keypress attribute, any keypresses that are not enter or return will be sent as \"key\" events to the Javascript model (or server, if connected).\n\nAn element is considered to be a button if it has a data-path property and it is either a non-input element, a button element, or a submit element. The behavior on the JSON object depends on its \"value\" attribute (if there is one):\n\n* no value attribute: when you press the button, Domdom does not change the JSON object but it sends a click event to the model (see Events, below)\n* the value is a boolean: it acts as a checkbox and when you press it, Domdom sets the boolean value in the JSON object and sends a \"set\" event (see Events, below)\n* otherwise: when the input element changes (like by focusing out of a field), Domdom sets the JSON path in the object to the value property, parsed as a JSON value (see Events, below)\n\n# Main JSON object\n\nviews: {NAMESPACE: {TYPE: HANDLEBARSDEF}, ...}\ntype: top\ncontent: [DATA, ...]\n\nThe main JSON object supplied to Domdom can optionally provide\n\n# Events\nThe Javascript model (or the server, if you are connecting to one) recieves events for clicks and sets with the JSON path and the new value, if there is one. The model (or server) can then change the JSON model in response to trigger an update on the screen, which re-renders the parts of the model that have changed.\n\n# Viewdefs\n\nYou define views with viewdefs and this is normally in the HTML file by putting `data-viewdef` attributes in HTML elements. the value of the `data-viewdef` element can be:\n\n- `TYPE`, where TYPE is any string value a JSON object might have in its `type` property\n- `NAMESPACE/TYPE`, where namespace is any name you choose to make a namespace and TYPE is as above\n\nYou can use a namespace with the `view` Handlebars plugin (see below).\n\nYou can also define viewdefs in the `views` property of the main JSON object.\n\nWithin a viewdef, you can template attributes in two ways see (example-server.html)[../example-server.html]'s account viewdef:\n\n1. enclose the entire contents of the viewdef in an HTML comment\n2. place all of the attribute templating into a data-subst attribute\n\n# The namespace type\nThe namespace type sets the namespace for its content object or array of objects, like this:\n\n{\"type\": \"namespace\", \"namespace\": \"bubba\", \"content\": ...}\n\nThis will set the namespace to bubba for the content object or array of objects.\n\n# The view plugin for Handlebars\n\nThe predefined `view` plugin lets you show a view on an object or array of objects and you can optionally set the namespace, like this:\n\n{{{view `path.in.JSON.object`}}}\n\nor\n\n{{{view `path.in.JSON.object` `namespace-name`}}}\n\n# Events\nThere are two types of events:\n\n- set(path, value): the user changed something in the GUI that triggered a set event\n- click(path, value): the user clicked a button, which can optionally include a value, depending on the view\n\n# Controllers\nIf you need custom javascript code, you can use a script element. You an use `element.query()`, `element.queryAll()`, `element.closest()`, etc. to access your view. In addition, these properties will be available:\n\n- `document.currentScript` will be the script element (as usual)\n- `Domdom.currentScript` will also hold the script element\n- `Domdom.activating` will be true, check this to verify that a view is actually initializing\n- `Domdom.context` will be the current context object\n- `Domdom.docPath` will be the current docPath (see DocPaths, below)\n\nAlso, each view will have a `data-location` attribute set to its path and a `data-namespace` attribute set to the view's namespace.\n\n# Using Domdom\n\nOn the web side, you need to make sure the files in the js and css directories are available to your HTML file and include these elements (altered to fit your file layout, of course):\n\n\\<link rel=\"stylesheet\" href=\"css/domdom.css\">\\</link>\n\\<script src=\"js/lib/handlebars-v4.0.5.js\">\\</script>\n\\<script src=\"js/domdom.js\">\\</script>\n\nIt's also compatible with AMD style so you can use something like require.js:\n\n\\<link rel=\"stylesheet\" href=\"css/domdom.css\">\\</link>\n\\<script data-main=\"js/config\" src=\"js/lib/require-2.1.18.js\">\\</script>\n\nYou can implement the model in local JavaScript or in a server. Domdom currently supports Julia servers.\n\n# Connecting to a server\nPut this at the bottom of the body of your web page, with the HOST and PORT of your server in it:\n\n\\<script>Domdom.connect({}, \"ws://HOST:PORT\")\\</script>\n\nThe Julia server code supports its own version of event handlers and DocPath (see the JavaScript model documentation below)\n\n# Using Domdom with a JavaScript model\n\n* Create a Javascript object with\n```\n{type: 'document',\n views: {default: {viewdefs...},\n NAMESPACE1: {viewdefs...}},\n contents: [CONTENTS...]}\n```\n\nViews are optional in the object since they can also be in the HTML page.\n\n- Create a context with {top: JSON, handler: HANDLER}\n  - JSON is the JSON object you have created\n  - HANDLER is an event handler\n    - You can use the patternHandler() function to easily specify event handlers (see source for documentation).\n    - Otherwise, the handler is {clickButton: (evt)=> ..., changedValue: (evt)=> ..., key: (evt)=> ...}\n    - the dispatchClick, dispatchKey, and dispatchSet functions dispatch events in a high-level way, using DocPaths (see below)\n## DocPaths\nA DocPath is proxy that makes it easy navigate paths in the JSON object and it lets you change the JSON object and automatically trigger re-rendering for those changes. It's called DocPath because the JSON object is the \"document\" of the Document Object Model. PatternHandler and the three dispatch functions (dispatchClick, dispatchKey, and dispatchSet) each send a DocPath as the first argument to your provided event handler function.\n\nGiven docp is a DocPath...\n\n- `docp.PROP` returns the value in the document at PROP if it is atomic or, if the value is an array or object, it returns a new DocPath for that location (with docp's path extended to include PROP)\n- `docp[INDEX]` returns the value in the document at INDEX if it is atomic or, if the value is an array or object, it returns a new DocPath for that location (with docp's path extended to include INDEX)\n- `docPathValue(docp)` returns docp's value\n- `docp.PROP = VALUE` sets the value in the document and cause Domdom to re-render it\n- `docPathParts(docp)` returns the \"parts\" of a DocPath, the Domdom object, the context, and the path array\n\nYou can use `batch(con, func)` if you need to change DocPaths outside of an event handler for \"event compression\". Batch eliminates re-rendering of the same object multiple times.\n\n# History\n\nI came up with the original concept around 2000 or 2001, as the next step in evolution for Classic Blend (a remote presentation system I first developed in 1995). The idea of the next step was that if you abstracted an entire GUI into a set of shared variables, you could use the variables to control a remote GUI from a server kind of like a [tuple space](https://en.wikipedia.org/wiki/Tuple_space) or like [SNMP](https://en.wikipedia.org/wiki/Simple_Network_Management_Protocol). Beyond this, you could reskin the GUI in dramatically different ways -- far more radically than GTK themes, for instance -- switching from a web browser to the Unreal engine, for example, where menus might be presented as shops (I actually prototyped a Quake-based front end at one point).\n\nI've been using an earlier and quite different variation of this idea since 2006 on an extremely large project. The browser side of the presentation is fully automatic now and we don't write any JavaScript for our front ends anymore, unless we're adding new kinds of widgets.\n\nThis version of the concept, Domdom, grew out of the Leisure project (which will eventually be updated to use Domdom) and I've used variations of this JavaScript and server code in several of my personal projects.\n\nThe [Xus](https://github.com/zot/Xus) project is also related to this and it's also based on shared variables.\n\n    define = window.define ? (n, func)-> window.Domdom = func(window.Handlebars)\n\n    define ['handlebars'], (Handlebars)->\n      {\n        compile\n        registerHelper\n      } = Handlebars\n\n      curId = 0\n      _verbose = false\n\n      setVerbose = (value)-> _verbose = value\n\n      verbose = (args...)-> _verbose && console.log(args...)\n\n      keyCode = (evt)->\n        if !(evt.key.toLowerCase() in ['shift', 'control', 'alt'])\n          key = evt.key\n          if key.toLowerCase().startsWith 'arrow'\n            key = key[5...].toLowerCase()\n          if evt.shiftKey && key.length > 1 then key = \"S-\" + key\n          if evt.ctrlKey then key = \"C-\" + key\n          if evt.altKey || evt.metaKey then key = \"M-\" + key\n          key\n\n      parsingDiv = document.createElement 'div'\n\n      query = document.querySelector.bind document\n\n      queryAll = document.querySelectorAll.bind document\n\n      find = (node, selector, includeSelf)->\n        if includeSelf && node.matches selector\n          [node].concat Array.prototype.slice.call(node.querySelectorAll selector)\n        else\n          node.querySelectorAll selector\n\n      parseHtml = (str)->\n        parsingDiv.innerHTML = \"<div>#{str}</div>\"\n        dom = parsingDiv.firstChild\n        parsingDiv.innerHTML = ''\n        if dom.childNodes.length == 1 && dom.firstChild.nodeType == 1 then dom.firstChild else dom\n\n      locationToString = (loc)->\n        str = \"\"\n        for coord in loc\n          if str then str += \" \"\n          str += coord\n        str\n\n      stringToLocation = (str)->\n        if str == \"\" then return []\n        (if String(Number(coord)) == coord then Number(coord) else coord) for coord in str.split ' '\n\n      locationFor = (json, context)-> context.top.index[json.$ID$]?[1] || stringToLocation context.location\n\n      resolvePath = (doc, location)->\n        if typeof location == 'string'\n          [j, path, parent] = doc.index[location]\n          location = path\n        if typeof location[0] == 'string' && location[0][0] == '@'\n          first = location[0][1...]\n          [j, path, parent] = doc.index[first]\n          location = if location.length > 1 then [path..., location[1...]...] else path\n        location\n\n      normalizePath = (path, index)->\n        if Array.isArray path then path\n        else\n          [ignore, path] = index[if typeof path == 'object' then path.$ID$ else path]\n          path\n\n      findIds = (parent, json, location = [], items={})->\n        if Array.isArray json\n          for el, i in json\n            findIds json, el, [location..., i], items\n        else if json != null && typeof json == 'object' && json.type?\n          loc = locationToString location\n          items[loc] = [json, location]\n          for k, v of json\n            findIds json, v, [location..., k], items\n        items\n\n      globalContext = namespace: 'default'\n\n      replace = (oldDom, newDom)->\n        # prefer mutating the old dom to replacing it\n        if oldDom && oldDom.nodeName == newDom.nodeName && oldDom.childNodes.length == 0 && newDom.childNodes.length == 0\n          na = new Set newDom.getAttributeNames()\n          for n in oldDom.getAttributeNames()\n            if !na.has(n) then oldDom.removeAttribute n\n          for n of na\n            nav = newDom.getAttribute n\n            if nav != oldDom.getAttribute n\n              oldDom.setAttribute n, nav\n          oldDom\n        else\n          oldDom.replaceWith newDom\n          newDom\n\n      domdoms = []\n\n      domdomBlur = (event)->\n        for md in domdoms\n          if event.target.nodeType == 1 && md.top.contains event.target\n              md.blurring = true\n\n      domdomFocus = (event)->\n        for md in domdoms\n          if md.blurring\n            md.blurring = false\n            md.runRefreshQueue()\n\n      class Domdom\n        constructor: (@top)->\n          if !@top then throw new Error \"No top node for Domdom\"\n          @refreshQueue = [] # queued refresh commands that execute after the current event\n          @specialTypes =\n            document: (dom, json, context)=> @renderTop dom, json, context\n          if !domdoms.length\n            window.addEventListener \"blur\", domdomBlur, true\n            window.addEventListener \"focus\", domdomFocus, true\n          domdoms.push this\n\nactivateScripts inserts copies of the parsed script elements, which makes them execute.\n\n        activateScripts: (el, ctx)->\n          if !Domdom.activating\n            Domdom.activating = true\n            Domdom.context = ctx\n            Domdom.docPath = docPath this, ctx, ctx.location\n            try\n              for script in el.querySelectorAll 'script'\n                if (!script.type || script.type.toLowerCase() == 'text/javascript') && (text = script.textContent)\n                  newScript = document.createElement 'script'\n                  newScript.type = 'text/javascript'\n                  if script.src then newScript.src = script.src\n                  newScript.textContent = text\n                  #keep the current script here in case the code needs access to it\n                  Domdom.currentScript = newScript\n                  script.parentNode.insertBefore newScript, script\n                  script.parentNode.removeChild script\n            finally\n              Domdom.currentScript = null\n              Domdom.activating = false\n              Domdom.context = null\n\nFind view for json and replace dom with the rendered view. Context contains global info like the\ncurrent namespace, etc.\n\n        render: (dom, json, context)->\n          context.views ?= {}\n          newDom = @baseRender dom, json, Object.assign {location: []}, context\n          @analyzeInputs newDom, context\n          newDom\n\n        baseRender: (dom, json, context)->\n          context = Object.assign {}, globalContext, context\n          id = json.$ID$ ? dom.getAttribute('id') ? ++curId\n          dom.setAttribute 'id', id\n          if Array.isArray json\n            newDom = parseHtml(\"<div data-location='#{locationToString context.location}'></div>\")\n            newDom.setAttribute 'id', id\n            dom.replaceWith newDom\n            for childDom, i in json\n              el = document.createElement 'div'\n              newDom.appendChild el\n              @baseRender el, childDom, Object.assign {}, context, {location: [context.location..., i]}\n            newDom\n          else if special = @specialTypes[json.type]\n            special dom, json, context\n          else @normalRender dom, json, context\n\n        # special renderers can use this to modify how their views render\n        normalRender: (dom, json, context)->\n          def = @findViewdef json.type, context\n          newDom = parseHtml(if def\n            try\n              old = globalContext\n              globalContext = context\n              def json, data: Object.assign {domdom: this}, {context}\n            finally\n              globalContext = old\n          else \"COULD NOT RENDER TYPE #{json.type}, NAMESPACE #{context.namespace}\")\n          newDom.setAttribute 'data-location', locationToString context.location\n          if !newDom.getAttribute 'data-namespace'\n            newDom.setAttribute 'data-namespace', context.namespace\n          newDom.setAttribute 'id', json.$ID$\n          if newDom.getAttribute 'data-path' then newDom.setAttribute 'data-path-full', locationToString context.location\n          newDom = replace dom, newDom\n          @populateInputs newDom, json, context\n          @activateScripts newDom, context\n          newDom\n\n        findViewdef: (type, context)->\n          if def = context.views?[context.namespace]?[type] then return def\n          else if el = query \"[data-viewdef='#{type}/#{context.namespace}']\" then namespace = context.namespace\n          else if def = context.views?.default?[type] then return def\n          else if !(el = query \"[data-viewdef='#{type}']\") then return null\n          if !context.views? then context.views = {}\n          if !context.views[namespace]? then context.views[namespace] = {}\n          domClone = el.cloneNode true\n          domClone.removeAttribute 'data-viewdef'\n          if domClone.firstChild && domClone.firstChild.nodeType == Node.COMMENT_NODE && domClone.firstChild == domClone.lastChild\n            context.views[namespace][type] = compile domClone.outerHTML.replace /<!--((.|\\n)*)-->/, '$1'\n          else\n            r1 = /data-subst=\\'([^\\']*)\\'/\n            r2 = /data-subst=\\\"([^\\\"]*)\\\"/\n            context.views[namespace][type] = compile domClone.outerHTML.replace(r1, '$1').replace(r2, '$1')\n\n        rerender: (json, context, thenBlock, exceptNode)->\n          @queueRefresh =>\n            for oldDom in @domsForRerender json, context when !exceptNode || oldDom != exceptNode\n              context = Object.assign {}, context, location: stringToLocation oldDom.getAttribute 'data-location'\n              if oldDom.getAttribute 'data-namespace' then context.namespace = oldDom.getAttribute 'data-namespace'\n              #newDom = @render query(\"[id='#{json.$ID$}']\"), json, context\n              newDom = if context.location.length == 1 then @renderTop oldDom, context.top, context\n              else newDom = @render oldDom, json, context\n              top = newDom.closest('[data-top]')\n              for node in find newDom, '[data-path-full]'\n                  @valueChanged top, node, context\n            thenBlock newDom\n\ndomsForRender(json, context) finds the doms for json or creates and inserts a blank one\n\n        domsForRerender: (json, context)->\n          if !json\n            for node in queryAll(\"[data-location='#{locationToString context.location}']\")\n              node.remove()\n            []\n          else if location = locationFor json, context\n            if (nodes = queryAll \"[data-location='#{locationToString location}']\").length then nodes\n            else\n              inside = false\n              end = location[location.length - 1]\n              if typeof end == 'number' then parent = @getPath context.top, context.top.contents, [location[0...-1]..., end - 1]\n              else\n                parent = @getPath context.top, context.top.contents, location[0...-1]\n                inside = true\n              if parentDom = query \"[id='#{parent.$ID$}']\"\n                dom = parseHtml \"<div id='#{json.$ID$}' data-location='#{locationToString location}'></div>\"\n                if inside then parentDom.appendChild dom\n                else parentDom.after dom\n                [dom]\n\n        renderTop: (dom, json, context)->\n          {views, contents} = json\n          json.index = {}\n          for k, v of findIds null, contents\n            if !v.$ID$ then v[0].$ID$ = ++curId\n            json.index[v[0].$ID$] = v\n          json.compiledViews = {}\n          context.views ?= {}\n          for namespace, types of views\n            json.compiledViews[namespace] ?= {}\n            context.views[namespace] ?= {}\n            for type, def of types\n              #destructively modify context's views\n              context.views[namespace][type] = json.compiledViews[namespace][type] = compile(def)\n          newDom = @baseRender dom, contents.main, Object.assign context, {top: json, location: ['main']}\n          newDom.setAttribute 'data-top', 'true'\n          newDom\n\n        queueRefresh: (cmd)->\n            @refreshQueue.push cmd\n            if !@pressed && !@blurring && document.activeElement != document.body\n                @runRefreshQueue()\n\n        runRefreshQueue: ->\n            if @refreshQueue.length > 0\n                q = @refreshQueue\n                @refreshQueue = []\n                setTimeout (->\n                    for cmd in q\n                        # TODO this selects even if the focus event was a mouse click instead of a tab\n                        if activeInput = document.activeElement.getAttribute 'data-path-full'\n                            index = Array.prototype.slice.call(queryAll(\"[data-path-full='#{activeInput}']\")).indexOf document.activeElement\n                        cmd()\n                        if activeInput && input = queryAll(\"[data-path-full='#{activeInput}']\")[index]\n                            input.focus()\n                            input.select?()\n                ), 5\n\n        adjustIndex: (index, path, parent, oldJson, newJson)->\n          oldIds = findIds parent, oldJson, path\n          newIds = findIds parent, newJson, path\n          oldKeys = new Set(Object.keys(oldIds))\n          for k, v of newIds\n            if !v[0].$ID$ && oldIds[k]?[0].$ID$\n              v[0].$ID$ = oldIds[k][0].$ID$\n            else if !v[0].$ID$\n              v[0].$ID$ = ++curId\n            index[v[0].$ID$] = v\n            oldKeys.delete(k)\n          for k from oldKeys\n            delete index[oldIds[k][0].$ID$]\n\n        analyzeInputs: (dom, context)->\n          for node in find dom, \"input, textarea, button, [data-path]\", true\n            do (node)=> if fullpath = node.getAttribute 'data-path-full'\n              path = stringToLocation node.getAttribute 'data-path-full'\n              if node.getAttribute 'data-bind-keypress'\n                node.on 'keydown', (e)->\n                  if !(keyCode(e) in ['C-r', 'C-J'])\n                    e.preventDefault()\n                    e.stopPropagation()\n                    context.handler.keyPress? e.originalEvent\n              if node.nodeName in ['DIV', 'SPAN'] # handle data-path in divs and spans\n                debugger\n                node.innerHTML = '<div></div>'\n                path = stringToLocation node.getAttribute 'data-path-full'\n                subcontext = Object.assign {}, context, location: path, namespace: node.getAttribute 'data-namespace'\n                newDom = @render node.firstChild, @getPath(context.top, context.top.contents, path), subcontext\n                node.removeAttribute 'data-namespace'\n                node.removeAttribute 'data-path'\n                for attr in ['style', 'class']\n                  if node.getAttribute(attr) && !newDom.getAttribute(attr)\n                    newDom.setAttribute(attr, node.getAttribute(attr))\n              else if (node.type in ['button', 'submit']) || !(node.type in ['text', 'password'])\n                # using onmousedown, onclick, path, and @pressed because\n                # the view can render out from under the button if focus changes\n                # which replaces the button with ta new one in the middle of a click event\n                node.onmousedown = (evt)=> @pressed = path\n                node.onclick = (evt)=>\n                  if @pressed == path || evt.detail == 0\n                    @pressed = false\n                    newValue = if v = node.getAttribute 'value'\n                      try\n                        JSON.parse v\n                      catch err\n                        v\n                    else if typeof (oldValue = @getPath context.top, context.top.contents, path) == 'boolean'\n                      newValue = !oldValue\n                    if newValue\n                      @setValueFromUser node, evt, dom, context, path, newValue\n                    else\n                      context.handler.clickButton? evt\n                    @runRefreshQueue()\n              else\n                node.onchange = (evt)=>\n                  ownerPathString = evt.srcElement.closest('[data-location]').getAttribute 'data-location'\n                  ownerPath = stringToLocation ownerPathString\n                  @setValueFromUser node, evt, dom, context, path, node.value\n\n        setValueFromUser: (node, evt, dom, context, path, value)->\n          ownerPathString = node.closest('[data-location]').getAttribute 'data-location'\n          ownerPath = stringToLocation ownerPathString\n          json = @getPath context.top, context.top.contents, ownerPath\n          @setPath context.top, context.top.contents, path, value\n          context.handler.changedValue? evt, value\n          @valueChanged evt.srcElement.closest('[data-top]'), evt.srcElement, context\n          @queueRefresh =>\n            for node in queryAll \"[data-location='#{ownerPathString}']\"\n              namespace = node.getAttribute 'data-namespace'\n              @render node, json, Object.assign {}, context, {namespace: namespace, location: ownerPath}\n\n        populateInputs: (dom, json, context)->\n          for node in find dom, \"[data-path]\", true\n            location = stringToLocation node.closest('[data-location]').getAttribute 'data-location'\n            path = node.getAttribute('data-path').split('.')\n            fullpath = locationToString [location..., path...]\n            if node.type in ['text', 'password'] then node.setAttribute 'value', @getPath context.top, json, path\n            node.setAttribute 'data-path-full', fullpath\n            setSome = true\n            setSome\n\n        valueChanged: (dom, source, context)->\n          value = source.value\n          fullpath = source.getAttribute 'data-path-full'\n          json = @getPath context.top, context.top.contents, (stringToLocation fullpath)[0...-1]\n          for node in find(dom, \"[data-path-full='#{fullpath}']\") when node != source\n            node.value = value\n            remove = new Set()\n            for attr in node.attributes\n              if attr.name.startsWith 'data-attribute-'\n                setAttr = attr.name.substring('data-attribute-'.length)\n                if json[attr.value]?\n                  attr[setAttr] = json[attr.value]\n                else if node.hasAttribute(setAttr) then remove.add(setAttr)\n            for attr from remove\n              node.removeAttribute attr\n\n        getPath: (doc, json, location)->\n          location = resolvePath doc, location\n          for i in location\n            json = json[i]\n          json\n\n        setPath: (document, json, location, value)->\n          last = json\n          lastI = 0\n          location = resolvePath document, location\n          for i, index in location\n            if index + 1 < location.length #not at the end\n              last = json\n              lastI = i\n              json = json[i]\n            else # at the end\n              if value.type?\n                @adjustIndex document.index, location[0..index], json, json[i], value\n              else\n                newJson = Object.assign {}, json\n                newJson[i] = value\n                @adjustIndex document.index, location[0...index], last, json, newJson\n              json[i] = value\n\n        defView: (context, namespace, type, def)->\n          context.views[namespace][type] = compile def\n\n      Handlebars.registerHelper 'view', (itemName, namespace, options)->\n        if typeof itemName != 'string' || (namespace && options && typeof namespace != 'string') then throw new Error(\"View must be called with one or two strings\")\n        if !options?\n          options = namespace\n          namespace = null\n        item = this[itemName]\n        context = options.data.context\n        #context = Object.assign {}, context, location: context.top.index[item.$ID$][1]\n        context = Object.assign {}, context, location: [context.location..., itemName]\n        if namespace then context.namespace = namespace\n        node = options.data.domdom.baseRender(parseHtml('<div></div>'), item, context)\n        if node.nodeType == 1 then node.outerHTML else node.data\n\n      Handlebars.registerHelper 'ref', (item, namespace, options)->\n        if !Array.isArray(item) && typeof item != 'string' then throw new Error(\"Ref must be called with an array or a string and optionally another string\")\n        if options? && namespace && typeof namespace != 'string' then throw new Error(\"Ref's namespace  must be a string\")\n        if !options?\n          options = namespace\n          namespace = null\n        context = options.data.context\n        location = resolvePath context.top, (if typeof item == 'string' then stringToLocation item else item)\n        context = Object.assign {}, context, location: location\n        if namespace then context.namespace = namespace\n        if json = options.data.domdom.getPath context.top, context.top.contents, location\n          node = options.data.domdom.baseRender(parseHtml('<div></div>'), json, context)\n          if node.nodeType == 1 then node.outerHTML else node.data\n        else \"\"\n\nCommand processor clients (if using client/server)\n\n      messages =\n        batch: (con, items)->\n          con.batchLevel++\n          for item in items\n            handleMessage con, item\n          con.batchLevel--\n        document: (con, doc)->\n          con.document = doc\n          con.context.top = doc\n          con.dom = con.dd.render con.dom, doc, con.context\n          con.context.views = con.document.compiledViews\n          console.log \"document:\", doc\n        set: (con, path, value)->\n          con.dd.setPath con.document, con.document.contents, path, value\n          if !value.type? then path.pop()\n          con.changedJson.add locationToString path\n          path\n        deleteLast: (con, path)->\n          obj = con.dd.getPath con.document, con.document.contents, path\n          oldValue = obj[obj.length - 1]\n          endPath = [path..., obj.length - 1]\n          con.dd.adjustIndex con.document.index, endPath, obj, oldValue, null\n          con.changedJson.add locationToString endPath\n          obj.pop()\n        insert: (con, path, json)->\n          obj = con.document.contents\n          for i, index in path\n            if index + 2 == path.length\n              if typeof i == 'number' then obj.splice(i, 0, null)\n              con.dd.setPath con.document, con.document.contents, path, json\n              path.pop()\n              while !con.dd.getPath(con.document, con.document.contents, path).type? then path.pop()\n              con.changedJson.add locationToString path\n              break\n            else obj = obj[i]\n        defView: (con, namespace, type, def)-> con.dd.defView con.context, namespace, type, def\n\n#Change handler\n\n      handleChanges = (ctx)->\n        if ctx.batchLevel == 0\n          for path from ctx.changedJson\n            ctx.dd.rerender ctx.dd.getPath(ctx.doc, ctx.doc.contents, stringToLocation path), ctx, (dom)->\n              if dom.getAttribute('data-top')? then ctx.setTopFunc dom\n          ctx.changedJson.clear()\n          ctx.dd.runRefreshQueue()\n\n      change = (ctx, path)->\n        ctx.changedJson.add locationToString path\n        if ctx.batchLevel == 0 then handleChanges ctx\n\n      initChangeContext = (dd, ctx, doc, setTopFunc)->\n        ctx.batchLevel = 0\n        ctx.changedJson = new Set()\n        ctx.dd = dd\n        ctx.doc = doc\n        ctx.setTopFunc = setTopFunc\n\n`batch(CTX, FUNC)` executes FUNC, queuing up re-rendering requests and then processing the requests all at once after FUNC finishes.\n\n      batch = (ctx, func)->\n        if typeof ctx.batchLevel == 'number'\n            ctx.batchLevel++\n            try\n                func()\n            finally\n                ctx.batchLevel--\n                handleChanges ctx\n        else func()\n\n#Local Code\n\n      isDocPathSym = Symbol(\"isDocPath\")\n\n      partsSym = Symbol(\"parts\")\n\n      syms = [isDocPathSym, partsSym]\n\n`isDocPath(obj)` returns true if the object is a docPath\n\n      isDocPath = (obj)-> obj[isDocPathSym]\n\n`docPathParts(docp)` returns the \"parts\" you used to create the doc path: [dd, ctx, path]\n\n      docPathParts = (docp)-> docp[partsSym]\n\n`docPathParent(docp)` returns a parent DocPath for docp (i.e. a DocPath without the last path element)\n\n      docPathParent = (docp)->\n        [dd, ctx, path] = docPathParts docp\n        if !path.length then docp\n        else docPath dd, ctx, path[...-1]\n\n`docPathValue(docp)` returns the value for the DocPath\n\n      docPathValue = (docp)->\n        [dd, ctx, path] = docPathParts docp\n        docValue(dd, ctx, path)\n\n`docPath(dd, ctx, path = [])` creates a DocPath\n\n      docPath = (dd, ctx, path = [])->\n        new Proxy {},\n          get: (target, name)->\n            if name == isDocPathSym then true\n            else if name == partsSym then [dd, ctx, path]\n            else if name == 'toString()' then ()-> printDocPath(dd, ctx, path)\n            else docValue dd, ctx, [...path, name]\n          set: (target, name, value)->\n            if !(name in syms)\n              path = [...path, name]\n              dd.setPath ctx.top, ctx.top.contents, path, value\n              change ctx, resolvePath ctx.top, path\n\n      docValue = (dd, ctx, path, value)->\n        if value == undefined\n            val = dd.getPath ctx.top, ctx.top.contents, path\n            if val == undefined then val\n            else docValue dd, ctx, path, dd.getPath ctx.top, ctx.top.contents, path\n        else if Array.isArray value then docPath dd, ctx, path\n        else if typeof value == 'object' then docPath dd, ctx, path\n        else value\n\n      eventPaths = (dd, ctx, evt)->\n        node = evt.srcElement\n        fullPath = stringToLocation(node.getAttribute('data-path-full'))\n        path = stringToLocation(node.getAttribute('data-path'))\n        objPath = stringToLocation(node.closest('[data-location]').getAttribute('data-location'))\n        obj = dd.getPath ctx.top, ctx.top.contents, objPath\n        value = dd.getPath ctx.top, ctx.top.contents, [objPath..., path...]\n        [fullPath, obj, objPath, path, value]\n\n      dispatchClick = (dd, ctx, handlers, evt)->\n        [fullPath, obj, objPath, path, value] = eventPaths dd, ctx, evt\n        docp = docPath(dd, ctx, fullPath)\n        batch ctx, ->\n          handlers[[obj.type, locationToString(path), \"click\"].join(',')]?(docp, obj, objPath, path, value, evt)\n          handlers[obj.type]?[locationToString(path)]?.click?(docp, obj, objPath, path, value, evt)\n\n      dispatchKey = (dd, ctx, handlers, evt)->\n        [fullPath, obj, objPath, path, value] = eventPaths dd, ctx, evt\n        docp = docPath(dd, ctx, fullPath)\n        batch ctx, ->\n          handlers[[obj.type, locationToString(path), \"key\"].join(',')]?(docp, obj, objPath, path, value, evt)\n          handlers[obj.type]?[locationToString(path)]?.key?(docp, obj, objPath, path, value, evt)\n\n      dispatchSet = (dd, ctx, handlers, evt)->\n        [fullPath, obj, objPath, path, value] = eventPaths dd, ctx, evt\n        docp = docPath(dd, ctx, fullPath)\n        batch ctx, ->\n          handlers[[obj.type, locationToString(path), \"set\"].join(',')]?(docp, obj, objPath, path, value, evt)\n          handlers[obj.type]?[locationToString(path)]?.set?(docp, obj, objPath, path, value, evt)\n\npatternHandler(DD, CTX, HANDLERS) returns an event handler and makes it easy to define event handlers for types and paths\n\nHANDLERS specify event handlers in one of two ways (you can mix them, using whichever is more convenient):\n- \"TYPE,FIELD,EVENT\": (OBJ, PATH, KEY, VALUE, EVT)=> ...\n- TYPE: {FIELD: {EVENT: (OBJ, PATH, KEY, VALUE, EVT)=> ...}}\n\n      patternHandler = (dd, ctx, handlers)->\n        ctx.handler =\n          clickButton: (evt)-> dispatchClick dd, ctx, handlers, evt\n          changedValue: (evt)-> dispatchSet dd, ctx, handlers, evt\n\n#Client Code\n\nConnect to WebSocket server\n\n      handleMessage = (con, [cmd, args...])->\n        verbose \"Message: #{JSON.stringify [cmd, args...]}\"\n        messages[cmd](con, args...)\n        if con.batchLevel == 0\n          for path from con.changedJson\n            con.dd.rerender con.dd.getPath(con.document, con.document.contents, stringToLocation path), Object.assign({}, con.context, location: path), (dom)->\n                if dom?.getAttribute('data-top')? then con.dom = dom\n          con.changedJson.clear()\n\n      connect = (con, url)->\n        con.dd = new Domdom query('#top')\n        con.batchLevel = 0\n        con.changedJson = new Set()\n        con.dom = query('#top')\n        con.context = Object.assign {}, con.context,\n          top: null\n          handler:\n            keyPress: (evt)->\n              if key = keyCode evt\n                ws.send JSON.stringify(['key', key, stringToLocation evt.currentTarget.closest('[data-location]').getAttribute 'data-location'])\n            clickButton: (evt)->\n              path = stringToLocation evt.currentTarget.getAttribute('data-path-full')\n              name = path.pop()\n              ws.send JSON.stringify ['click', name, path]\n            changedValue: (evt, value)->\n              node = evt.currentTarget\n              ws.send JSON.stringify ['set', stringToLocation(node.getAttribute 'data-path-full'), value ? node.value]\n        ws = con.socket = new WebSocket url\n        ws.onmessage = (msg)->\n          verbose \"MESSAGE:\", msg\n          handleMessage con, JSON.parse msg.data\n        ws\n\n      Object.assign Domdom, {\n        locationToString\n        stringToLocation\n        query\n        queryAll\n        find\n        parseHtml\n        keyCode\n        connect\n        messages\n        docPath\n        docPathValue\n        isDocPath\n        docPathParts\n        docPathParent\n        initChangeContext\n        batch\n        change\n        patternHandler\n        dispatchClick\n        dispatchKey\n        dispatchSet\n        setVerbose\n      }\n\n      Domdom\n"
  ]
}